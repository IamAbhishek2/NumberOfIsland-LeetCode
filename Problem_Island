class Solution {
    public boolean[][] visited; 
    public void dfsIsland(char[][] grid, int r, int c) {
        
        if(r < 0 || c < 0 || r >= grid.length || c >= grid[0].length) return;
 
        if(grid[r][c] == '0' || visited[r][c] ) return;
 
        if(grid[r][c] == '1') visited[r][c] = true;
 
        dfsIsland(grid, r+1, c);
        dfsIsland(grid, r-1, c);
        dfsIsland(grid, r, c+1);
        dfsIsland(grid, r, c-1);
    }
 
    public int numIslands(char[][] grid) {
        visited = new boolean[grid.length][grid[0].length];
        int numIsland = 0;
 
        for(int r = 0; r < grid.length; r++) 
            for(int c = 0; c < grid[0].length; c++)
                if(grid[r][c] == '1' && visited[r][c] == false) {
                    numIsland++;
                    dfsIsland(grid, r, c);
                }
 
        return numIsland;
    }
}
